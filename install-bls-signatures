#!/usr/bin/env bash

set -Eeo pipefail

# shellcheck source=install-shared.bash
source "$(dirname "${BASH_SOURCE[0]}")/install-shared.bash"

#subm_dir="bls-signatures"

#git submodule update --init --recursive $subm_dir

download() {
    tmp_dir=$(mktemp -d)
    tar -C "$tmp_dir" -xzf "$tarball_path"

    cp "${tmp_dir}/include/libbls_signatures.h" .
    cp "${tmp_dir}/lib/libbls_signatures.a" .
    cp "${tmp_dir}/lib/pkgconfig/libbls_signatures.pc" .

}

build() {
        build_from_source "${subm_dir}"

    find "${subm_dir}/target/release" -type f -name libbls_signatures.h -exec cp -- "{}" . \;
    find "${subm_dir}/target/release" -type f -name libbls_signatures_ffi.a -exec cp -- "{}" libbls_signatures.a \;
    find "${subm_dir}/target/release" -type f -name libbls_signatures.pc -exec cp -- "{}" . \;

    if [[ ! -f "./libbls_signatures.h" ]]; then
        (>&2 echo "failed to install libbls_signatures.h")
        exit 1
    fi

    if [[ ! -f "./libbls_signatures.a" ]]; then
        (>&2 echo "failed to install libbls_signatures.a")
        exit 1
    fi

    if [[ ! -f "./libbls_signatures.pc" ]]; then
        (>&2 echo "failed to install libbls_signatures.pc")
        exit 1
    fi

}


if [ $# = 0 ]; then
    if download_release_tarball tarball_path "${subm_dir}"; then
	download
    else
	(>&2 echo "failed to find or obtain precompiled assets for ${subm_dir}, falling back to local build")
    fi
elif [ $1 == "build" ]; then
    build
elif [ $1 == "download" ]; then
    download
else
    (>&2 echo "usage $0 [build|download]")
    exit 1
fi
